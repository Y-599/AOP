#AOP是什么？用来什么
1，面向切面编程，是对oop编程模式的延伸，因为在oop模式有三大特性，其中有个多态，这就造成多个对象可能会有相同的行为，按照oop模式编写的话就会造成大量重复的代码
为了更好维护代码所以aop。
2，使用动态代理(jdk代理和clibin代理，区别是接口)的方法实现在执行方法的前后或则出现异常后加入相关的逻辑
比如事物管理，执行前开启事物，执行完成后开启事物，中途出现异常则回滚事物，
列入：日志管理，权限管理（方法执行前查看是否权限足够）

开始复习：
    1.导入AOp整合包
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
  </dependency>

  2. 然后自定义注解 。

  3.编写切点的内容，也就是纵向代码中重复的代码，用的是环绕注解，需要主动去调动链接点，在这点之前后，定义与
  逻辑相关的业务{
  @Aspect //表明此类为切点面
  @Component//将aop交于容器管理，让程序员不在去注意细节，只需要注重逻辑
  @Pointcut表示这个方法是切入点，即一套表达式，因为annotation标签需要依附与方法，
  所以定义了allAddMethod()方法让其依附，这个方法没有返回值，只是一个标记。
  其中execution(* add*(..))表示无论有无返回值，只要以add开头的方法，无论有无参数都被织入。
  Pointcut还可以指定到具体的类
  }